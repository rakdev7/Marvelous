{\rtf1\ansi\ansicpg1252\cocoartf1671
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fswiss\fcharset0 Helvetica-Bold;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1\b Coding Exercise\

\f0\b0 \
Create a iPhone app that uses an UITableView to display a list of Marvel characters from the Marvel API.  iPhone only, don't worry about iPad.  The app should launch, show a spinning activity indicator while data is loading, and then show a list of the first 50 Marvel characters.  Each cell in the list should show a thumbnail image of the character and the name of the character.  The design of how the cell looks is up to you. \
\
The MarvelAPI swift class included in this project can be used to load the character data.  It has all the code required to call the API and then get the response data without any need for doing your own parsing.  Part of this exercise is being able to understand the MarvelAPI code and figuring out how to call it correctly.  The Marvel API documentation is here.. https://developer.marvel.com/docs#!/public/g\
\
Your app should perform proper error handling.  If the API call returns an error, you should post an alert and allow the user to retry the operation to load the character data.  A good way to trigger an error is to turn off your network connection before launching the app and then turn it back on before retrying.\
\

\f1\b Extra Credit
\f0\b0 \
\
For extra credit, create a UITableView that pages in characters 50 at a time as the user scrolls down until all the characters have been loaded.   One way to accomplish this is to have a cell at the bottom of the table that triggers the next API call to load the next 50 characters when it becomes visible.  \
\
\
\
\
}